name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: devicaro18

jobs:
  build-and-deploy:
    runs-on: self-hosted # Runner na sua EC2
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          # Build API Gateway
          npx nx build api-gateway

          # Build Auth Service
          npx nx build auth-service

          # Build User UI
          npx nx build user-ui

      - name: Build Docker images locally
        run: |
          # Build API Gateway
          docker build -f ./apps/api-gateway/Dockerfile -t api-gateway:${{ github.sha }} .

          # Build Auth Service
          docker build -f ./apps/auth-service/Dockerfile -t auth-service:${{ github.sha }} .

          # Build User UI
          docker build -f ./apps/user-ui/Dockerfile -t user-ui:${{ github.sha }} .

      - name: Deploy to Kubernetes
        run: |
          # Aplicar namespace se n√£o existir
          minikube start
          kubectl create namespace ecommerce --dry-run=client -o yaml | kubectl apply -f -

          # Aplicar ConfigMap
          kubectl apply -f infra/k8s/configmap.yaml

          # Aplicar deployments
          kubectl apply -f infra/k8s/api-gateway-deployment.yaml
          kubectl apply -f infra/k8s/auth-service-deployment.yaml
          kubectl apply -f infra/k8s/user-ui-deployment.yaml

          # Aplicar ingress
          kubectl apply -f infra/k8s/ingress.yaml

          # Atualizar imagens nos deployments
          kubectl set image deployment/api-gateway api-gateway=api-gateway:${{ github.sha }} -n ecommerce
          kubectl set image deployment/auth-service auth-service=auth-service:${{ github.sha }} -n ecommerce
          kubectl set image deployment/user-ui user-ui=user-ui:${{ github.sha }} -n ecommerce

          # Aguardar rollout
          kubectl rollout status deployment/api-gateway -n ecommerce
          kubectl rollout status deployment/auth-service -n ecommerce
          kubectl rollout status deployment/user-ui -n ecommerce

      - name: Show deployment status
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -n ecommerce

          echo "=== Services Status ==="
          kubectl get services -n ecommerce

          echo "=== Ingress Status ==="
          kubectl get ingress -n ecommerce
