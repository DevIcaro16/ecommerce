name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ecommerce
  OWNER_LOWERCASE: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          # Build API Gateway
          npx nx build api-gateway

          # Build Auth Service
          npx nx build auth-service

          # Build User UI
          npx nx build user-ui

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set package names
        run: |
          echo "PACKAGE_PREFIX=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api-gateway/Dockerfile
          push: true
          tags: ghcr.io/${{ env.PACKAGE_PREFIX }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Auth Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/auth-service/Dockerfile
          push: true
          tags: ghcr.io/${{ env.PACKAGE_PREFIX }}/auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push User UI
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/user-ui/Dockerfile
          push: true
          tags: ghcr.io/${{ env.PACKAGE_PREFIX }}/user-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ./infra/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infra/terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get EC2 IP
        id: get-ip
        working-directory: ./infra/terraform
        run: |
          IP=$(terraform output -raw public_ip)
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.ip }} >> ~/.ssh/known_hosts

      - name: Deploy to Kubernetes
        run: |
          ssh ubuntu@${{ steps.get-ip.outputs.ip }} << 'EOF'
            # Update images in Kubernetes
            kubectl set image deployment/api-gateway api-gateway=ghcr.io/${{ env.PACKAGE_PREFIX }}/api-gateway:${{ github.sha }} -n ecommerce
            kubectl set image deployment/auth-service auth-service=ghcr.io/${{ env.PACKAGE_PREFIX }}/auth-service:${{ github.sha }} -n ecommerce
            kubectl set image deployment/user-ui user-ui=ghcr.io/${{ env.PACKAGE_PREFIX }}/user-ui:${{ github.sha }} -n ecommerce
            
            # Wait for rollout
            kubectl rollout status deployment/api-gateway -n ecommerce
            kubectl rollout status deployment/auth-service -n ecommerce
            kubectl rollout status deployment/user-ui -n ecommerce
          EOF
